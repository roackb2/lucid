// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/pubsub/type.go
//
// Generated by this command:
//
//	mockgen -source internal/pkg/pubsub/type.go -destination test/_mocks/pubsub/mock_type.go
//

// Package mock_pubsub is a generated GoMock package.
package mock_pubsub

import (
	context "context"
	reflect "reflect"
	time "time"

	pubsub "github.com/roackb2/lucid/internal/pkg/pubsub"
	gomock "go.uber.org/mock/gomock"
)

// MockPubSub is a mock of PubSub interface.
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
	isgomock struct{}
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub.
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance.
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPubSub) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPubSubMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubSub)(nil).Close))
}

// Publish mocks base method.
func (m *MockPubSub) Publish(ctx context.Context, topic, message string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, topic, message, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubMockRecorder) Publish(ctx, topic, message, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSub)(nil).Publish), ctx, topic, message, timeout)
}

// Subscribe mocks base method.
func (m *MockPubSub) Subscribe(topic string, callback pubsub.OnMessageCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubMockRecorder) Subscribe(topic, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSub)(nil).Subscribe), topic, callback)
}

// Unsubscribe mocks base method.
func (m *MockPubSub) Unsubscribe(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", topic)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPubSubMockRecorder) Unsubscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPubSub)(nil).Unsubscribe), topic)
}
