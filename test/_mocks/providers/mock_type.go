// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/agents/providers/type.go
//
// Generated by this command:
//
//	mockgen -source internal/pkg/agents/providers/type.go -destination test/_mocks/providers/mock_type.go
//

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	providers "github.com/roackb2/lucid/internal/pkg/agents/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockChatProvider is a mock of ChatProvider interface.
type MockChatProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChatProviderMockRecorder
	isgomock struct{}
}

// MockChatProviderMockRecorder is the mock recorder for MockChatProvider.
type MockChatProviderMockRecorder struct {
	mock *MockChatProvider
}

// NewMockChatProvider creates a new mock instance.
func NewMockChatProvider(ctrl *gomock.Controller) *MockChatProvider {
	mock := &MockChatProvider{ctrl: ctrl}
	mock.recorder = &MockChatProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatProvider) EXPECT() *MockChatProviderMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockChatProvider) Chat(messages []providers.ChatMessage) (providers.ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", messages)
	ret0, _ := ret[0].(providers.ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockChatProviderMockRecorder) Chat(messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockChatProvider)(nil).Chat), messages)
}
