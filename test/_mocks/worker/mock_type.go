// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/agents/worker/type.go
//
// Generated by this command:
//
//	mockgen -source internal/pkg/agents/worker/type.go -destination test/_mocks/worker/mock_type.go
//

// Package mock_worker is a generated GoMock package.
package mock_worker

import (
	context "context"
	reflect "reflect"

	worker "github.com/roackb2/lucid/internal/pkg/agents/worker"
	gomock "go.uber.org/mock/gomock"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
	isgomock struct{}
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockWorker) Chat(ctx context.Context, prompt string, callbacks worker.WorkerCallbacks) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", ctx, prompt, callbacks)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockWorkerMockRecorder) Chat(ctx, prompt, callbacks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockWorker)(nil).Chat), ctx, prompt, callbacks)
}

// Close mocks base method.
func (m *MockWorker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWorkerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWorker)(nil).Close))
}

// Deserialize mocks base method.
func (m *MockWorker) Deserialize(state []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockWorkerMockRecorder) Deserialize(state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockWorker)(nil).Deserialize), state)
}

// GetStatus mocks base method.
func (m *MockWorker) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockWorkerMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockWorker)(nil).GetStatus))
}

// PersistState mocks base method.
func (m *MockWorker) PersistState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistState")
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistState indicates an expected call of PersistState.
func (mr *MockWorkerMockRecorder) PersistState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistState", reflect.TypeOf((*MockWorker)(nil).PersistState))
}

// RestoreState mocks base method.
func (m *MockWorker) RestoreState(agentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreState", agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreState indicates an expected call of RestoreState.
func (mr *MockWorkerMockRecorder) RestoreState(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreState", reflect.TypeOf((*MockWorker)(nil).RestoreState), agentID)
}

// ResumeChat mocks base method.
func (m *MockWorker) ResumeChat(ctx context.Context, newPrompt *string, callbacks worker.WorkerCallbacks) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeChat", ctx, newPrompt, callbacks)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeChat indicates an expected call of ResumeChat.
func (mr *MockWorkerMockRecorder) ResumeChat(ctx, newPrompt, callbacks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeChat", reflect.TypeOf((*MockWorker)(nil).ResumeChat), ctx, newPrompt, callbacks)
}

// SendCommand mocks base method.
func (m *MockWorker) SendCommand(ctx context.Context, command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCommand", ctx, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCommand indicates an expected call of SendCommand.
func (mr *MockWorkerMockRecorder) SendCommand(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCommand", reflect.TypeOf((*MockWorker)(nil).SendCommand), ctx, command)
}

// Serialize mocks base method.
func (m *MockWorker) Serialize() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockWorkerMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockWorker)(nil).Serialize))
}
