// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Jay / Fienna Liang",
            "url": "https://github.com/roackb2",
            "email": "roackb2@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/agents/create": {
            "post": {
                "description": "Starts a new agent with role and task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Start a new agent",
                "parameters": [
                    {
                        "description": "Agent details",
                        "name": "agent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.StartAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Agent created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "post": {
                "description": "Creates a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Returns the health status of the application",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "healthz"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "Handles websocket connections and delegates to the ws package",
                "tags": [
                    "websocket"
                ],
                "summary": "Handle websocket connections",
                "responses": {
                    "200": {
                        "description": "Websocket connection established",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ws.WsMessage"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.StartAgentRequest": {
            "type": "object",
            "required": [
                "role",
                "task"
            ],
            "properties": {
                "role": {
                    "type": "string"
                },
                "task": {
                    "type": "string"
                }
            }
        },
        "controllers.UserRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "worker.WorkerMessage": {
            "description": "Message structure for inter-agent communication",
            "type": "object",
            "properties": {
                "from_agent_id": {
                    "description": "The ID of the sending agent",
                    "type": "string"
                },
                "message_type": {
                    "description": "The type of message being sent",
                    "type": "string"
                },
                "payload": {
                    "description": "The message payload",
                    "type": "object"
                },
                "to_agent_id": {
                    "description": "The ID of the receiving agent",
                    "type": "string"
                }
            }
        },
        "worker.WorkerProgressNotification": {
            "description": "Progress notification containing the agent ID and progress message",
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "The ID of the agent reporting progress",
                    "type": "string"
                },
                "progress": {
                    "description": "The progress message content",
                    "type": "string"
                }
            }
        },
        "worker.WorkerResponseNotification": {
            "description": "Response notification containing the agent ID and response message",
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "The ID of the agent sending the response\n@Description Unique identifier of the agent",
                    "type": "string"
                },
                "response": {
                    "description": "The response message content\n@Description Response message from the agent",
                    "type": "string"
                }
            }
        },
        "ws.WebSocketDataTypes": {
            "description": "All websocket response data types",
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/worker.WorkerMessage"
                },
                "pong": {
                    "type": "string"
                },
                "progress": {
                    "$ref": "#/definitions/worker.WorkerProgressNotification"
                },
                "response": {
                    "$ref": "#/definitions/worker.WorkerResponseNotification"
                }
            }
        },
        "ws.WsEventType": {
            "type": "string",
            "enum": [
                "ping",
                "pong",
                "agent_response",
                "agent_progress"
            ],
            "x-enum-varnames": [
                "WsEventTypePing",
                "WsEventTypePong",
                "WsEventTypeAgentResponse",
                "WsEventTypeAgentProgress"
            ]
        },
        "ws.WsMessage": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/ws.WebSocketDataTypes"
                },
                "event": {
                    "$ref": "#/definitions/ws.WsEventType"
                }
            }
        }
    },
    "securityDefinitions": {
        "None": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Lucid API",
	Description:      "This is the API for the Lucid project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
