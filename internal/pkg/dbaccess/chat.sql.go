// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat.sql

package dbaccess

import (
	"context"
)

const createChat = `-- name: CreateChat :exec
INSERT INTO chats (user_id, content)
VALUES ($1, $2)
`

type CreateChatParams struct {
	UserID  int32
	Content string
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) error {
	_, err := q.db.Exec(ctx, createChat, arg.UserID, arg.Content)
	return err
}

const getChats = `-- name: GetChats :many
SELECT id, user_id, content, created_at, updated_at FROM chats WHERE user_id = $1
`

func (q *Queries) GetChats(ctx context.Context, userID int32) ([]Chat, error) {
	rows, err := q.db.Query(ctx, getChats, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
