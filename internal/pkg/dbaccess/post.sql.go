// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package dbaccess

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (user_id, content)
VALUES ($1, $2)
`

type CreatePostParams struct {
	UserID  int32
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.Exec(ctx, createPost, arg.UserID, arg.Content)
	return err
}

const searchPosts = `-- name: SearchPosts :many
SELECT id, user_id, content, created_at, updated_at
FROM posts
WHERE SIMILARITY(content, $1::text) > 0.3
OR content ILIKE '%' || $1 || '%'
OR content ILIKE ANY(
  SELECT '%' || word || '%'
  FROM UNNEST(STRING_TO_ARRAY($1, ' ')) AS word
)
`

func (q *Queries) SearchPosts(ctx context.Context, keyword string) ([]Post, error) {
	rows, err := q.db.Query(ctx, searchPosts, keyword)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
