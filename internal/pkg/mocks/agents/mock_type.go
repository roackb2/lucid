// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/agents/type.go

// Package mock_agents is a generated GoMock package.
package mock_agents

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agents "github.com/roackb2/lucid/internal/pkg/agents"
	foundation "github.com/roackb2/lucid/internal/pkg/agents/foundation"
)

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockAgent) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockAgentMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockAgent)(nil).GetID))
}

// GetStatus mocks base method.
func (m *MockAgent) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAgentMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAgent)(nil).GetStatus))
}

// PersistState mocks base method.
func (m *MockAgent) PersistState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistState")
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistState indicates an expected call of PersistState.
func (mr *MockAgentMockRecorder) PersistState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistState", reflect.TypeOf((*MockAgent)(nil).PersistState))
}

// ResumeTask mocks base method.
func (m *MockAgent) ResumeTask(agentID string, newPrompt *string, controlCh foundation.ControlReceiverCh, reportCh foundation.ReportSenderCh) (*agents.AgentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeTask", agentID, newPrompt, controlCh, reportCh)
	ret0, _ := ret[0].(*agents.AgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeTask indicates an expected call of ResumeTask.
func (mr *MockAgentMockRecorder) ResumeTask(agentID, newPrompt, controlCh, reportCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeTask", reflect.TypeOf((*MockAgent)(nil).ResumeTask), agentID, newPrompt, controlCh, reportCh)
}

// StartTask mocks base method.
func (m *MockAgent) StartTask(controlCh foundation.ControlReceiverCh, reportCh foundation.ReportSenderCh) (*agents.AgentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", controlCh, reportCh)
	ret0, _ := ret[0].(*agents.AgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTask indicates an expected call of StartTask.
func (mr *MockAgentMockRecorder) StartTask(controlCh, reportCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockAgent)(nil).StartTask), controlCh, reportCh)
}
