// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/control_plane/type.go

// Package mock_control_plane is a generated GoMock package.
package mock_control_plane

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agents "github.com/roackb2/lucid/internal/pkg/agents"
	control_plane "github.com/roackb2/lucid/internal/pkg/control_plane"
)

// MockNotificationBus is a mock of NotificationBus interface.
type MockNotificationBus struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationBusMockRecorder
}

// MockNotificationBusMockRecorder is the mock recorder for MockNotificationBus.
type MockNotificationBusMockRecorder struct {
	mock *MockNotificationBus
}

// NewMockNotificationBus creates a new mock instance.
func NewMockNotificationBus(ctrl *gomock.Controller) *MockNotificationBus {
	mock := &MockNotificationBus{ctrl: ctrl}
	mock.recorder = &MockNotificationBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationBus) EXPECT() *MockNotificationBusMockRecorder {
	return m.recorder
}

// ReadResponse mocks base method.
func (m *MockNotificationBus) ReadResponse() *agents.AgentResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadResponse")
	ret0, _ := ret[0].(*agents.AgentResponse)
	return ret0
}

// ReadResponse indicates an expected call of ReadResponse.
func (mr *MockNotificationBusMockRecorder) ReadResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadResponse", reflect.TypeOf((*MockNotificationBus)(nil).ReadResponse))
}

// WriteResponse mocks base method.
func (m *MockNotificationBus) WriteResponse(resp *agents.AgentResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteResponse", resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteResponse indicates an expected call of WriteResponse.
func (mr *MockNotificationBusMockRecorder) WriteResponse(resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponse", reflect.TypeOf((*MockNotificationBus)(nil).WriteResponse), resp)
}

// MockAgentTracker is a mock of AgentTracker interface.
type MockAgentTracker struct {
	ctrl     *gomock.Controller
	recorder *MockAgentTrackerMockRecorder
}

// MockAgentTrackerMockRecorder is the mock recorder for MockAgentTracker.
type MockAgentTrackerMockRecorder struct {
	mock *MockAgentTracker
}

// NewMockAgentTracker creates a new mock instance.
func NewMockAgentTracker(ctrl *gomock.Controller) *MockAgentTracker {
	mock := &MockAgentTracker{ctrl: ctrl}
	mock.recorder = &MockAgentTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentTracker) EXPECT() *MockAgentTrackerMockRecorder {
	return m.recorder
}

// AddTracking mocks base method.
func (m *MockAgentTracker) AddTracking(agentID string, tracking control_plane.AgentTracking) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTracking", agentID, tracking)
}

// AddTracking indicates an expected call of AddTracking.
func (mr *MockAgentTrackerMockRecorder) AddTracking(agentID, tracking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTracking", reflect.TypeOf((*MockAgentTracker)(nil).AddTracking), agentID, tracking)
}

// GetAllTrackings mocks base method.
func (m *MockAgentTracker) GetAllTrackings() []control_plane.AgentTracking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTrackings")
	ret0, _ := ret[0].([]control_plane.AgentTracking)
	return ret0
}

// GetAllTrackings indicates an expected call of GetAllTrackings.
func (mr *MockAgentTrackerMockRecorder) GetAllTrackings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTrackings", reflect.TypeOf((*MockAgentTracker)(nil).GetAllTrackings))
}

// GetTracking mocks base method.
func (m *MockAgentTracker) GetTracking(agentID string) (control_plane.AgentTracking, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracking", agentID)
	ret0, _ := ret[0].(control_plane.AgentTracking)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTracking indicates an expected call of GetTracking.
func (mr *MockAgentTrackerMockRecorder) GetTracking(agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracking", reflect.TypeOf((*MockAgentTracker)(nil).GetTracking), agentID)
}

// RemoveTracking mocks base method.
func (m *MockAgentTracker) RemoveTracking(agentID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveTracking", agentID)
}

// RemoveTracking indicates an expected call of RemoveTracking.
func (mr *MockAgentTrackerMockRecorder) RemoveTracking(agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTracking", reflect.TypeOf((*MockAgentTracker)(nil).RemoveTracking), agentID)
}

// UpdateTracking mocks base method.
func (m *MockAgentTracker) UpdateTracking(agentID string, tracking control_plane.AgentTracking) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTracking", agentID, tracking)
}

// UpdateTracking indicates an expected call of UpdateTracking.
func (mr *MockAgentTrackerMockRecorder) UpdateTracking(agentID, tracking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTracking", reflect.TypeOf((*MockAgentTracker)(nil).UpdateTracking), agentID, tracking)
}
