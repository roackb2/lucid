// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/agents/foundation/type.go
//
// Generated by this command:
//
//	mockgen -source internal/pkg/agents/foundation/type.go -destination internal/pkg/mocks/foundation/mock_type.go
//

// Package mock_foundation is a generated GoMock package.
package mock_foundation

import (
	reflect "reflect"

	foundation "github.com/roackb2/lucid/internal/pkg/agents/foundation"
	gomock "go.uber.org/mock/gomock"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
	isgomock struct{}
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockWorker) Chat(prompt string, controlCh foundation.ControlReceiverCh, reportCh foundation.ReportSenderCh) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", prompt, controlCh, reportCh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockWorkerMockRecorder) Chat(prompt, controlCh, reportCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockWorker)(nil).Chat), prompt, controlCh, reportCh)
}

// Deserialize mocks base method.
func (m *MockWorker) Deserialize(state []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockWorkerMockRecorder) Deserialize(state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockWorker)(nil).Deserialize), state)
}

// GetStatus mocks base method.
func (m *MockWorker) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockWorkerMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockWorker)(nil).GetStatus))
}

// PersistState mocks base method.
func (m *MockWorker) PersistState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistState")
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistState indicates an expected call of PersistState.
func (mr *MockWorkerMockRecorder) PersistState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistState", reflect.TypeOf((*MockWorker)(nil).PersistState))
}

// RestoreState mocks base method.
func (m *MockWorker) RestoreState(agentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreState", agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreState indicates an expected call of RestoreState.
func (mr *MockWorkerMockRecorder) RestoreState(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreState", reflect.TypeOf((*MockWorker)(nil).RestoreState), agentID)
}

// ResumeChat mocks base method.
func (m *MockWorker) ResumeChat(newPrompt *string, controlCh foundation.ControlReceiverCh, reportCh foundation.ReportSenderCh) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeChat", newPrompt, controlCh, reportCh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeChat indicates an expected call of ResumeChat.
func (mr *MockWorkerMockRecorder) ResumeChat(newPrompt, controlCh, reportCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeChat", reflect.TypeOf((*MockWorker)(nil).ResumeChat), newPrompt, controlCh, reportCh)
}

// Serialize mocks base method.
func (m *MockWorker) Serialize() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockWorkerMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockWorker)(nil).Serialize))
}
