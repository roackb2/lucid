// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/agents/foundation/type.go

// Package mock_foundation is a generated GoMock package.
package mock_foundation

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	foundation "github.com/roackb2/lucid/internal/pkg/agents/foundation"
)

// MockFoundationModel is a mock of FoundationModel interface.
type MockFoundationModel struct {
	ctrl     *gomock.Controller
	recorder *MockFoundationModelMockRecorder
}

// MockFoundationModelMockRecorder is the mock recorder for MockFoundationModel.
type MockFoundationModelMockRecorder struct {
	mock *MockFoundationModel
}

// NewMockFoundationModel creates a new mock instance.
func NewMockFoundationModel(ctrl *gomock.Controller) *MockFoundationModel {
	mock := &MockFoundationModel{ctrl: ctrl}
	mock.recorder = &MockFoundationModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFoundationModel) EXPECT() *MockFoundationModelMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockFoundationModel) Chat(prompt string, controlCh foundation.ControlReceiverCh, reportCh foundation.ReportSenderCh) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", prompt, controlCh, reportCh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockFoundationModelMockRecorder) Chat(prompt, controlCh, reportCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockFoundationModel)(nil).Chat), prompt, controlCh, reportCh)
}

// Deserialize mocks base method.
func (m *MockFoundationModel) Deserialize(state []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockFoundationModelMockRecorder) Deserialize(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockFoundationModel)(nil).Deserialize), state)
}

// GetStatus mocks base method.
func (m *MockFoundationModel) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockFoundationModelMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockFoundationModel)(nil).GetStatus))
}

// PersistState mocks base method.
func (m *MockFoundationModel) PersistState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistState")
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistState indicates an expected call of PersistState.
func (mr *MockFoundationModelMockRecorder) PersistState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistState", reflect.TypeOf((*MockFoundationModel)(nil).PersistState))
}

// RestoreState mocks base method.
func (m *MockFoundationModel) RestoreState(agentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreState", agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreState indicates an expected call of RestoreState.
func (mr *MockFoundationModelMockRecorder) RestoreState(agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreState", reflect.TypeOf((*MockFoundationModel)(nil).RestoreState), agentID)
}

// ResumeChat mocks base method.
func (m *MockFoundationModel) ResumeChat(newPrompt *string, controlCh foundation.ControlReceiverCh, reportCh foundation.ReportSenderCh) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeChat", newPrompt, controlCh, reportCh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeChat indicates an expected call of ResumeChat.
func (mr *MockFoundationModelMockRecorder) ResumeChat(newPrompt, controlCh, reportCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeChat", reflect.TypeOf((*MockFoundationModel)(nil).ResumeChat), newPrompt, controlCh, reportCh)
}

// Serialize mocks base method.
func (m *MockFoundationModel) Serialize() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockFoundationModelMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockFoundationModel)(nil).Serialize))
}
